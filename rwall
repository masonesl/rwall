#!/usr/bin/python

from typing      import Union, Optional
from argparse    import ArgumentParser, Namespace
from sys         import stderr, stdout
from yaml        import safe_load
from time        import sleep, time
from dataclasses import dataclass
from threading   import Thread
from random      import choice as rchoice
from shlex       import split  as shsplit
from subprocess  import (
        run    as sprun,
        PIPE
    )
from os          import (
        listdir,
        environ,
        path,
        mkfifo,
        remove,
        getuid,
        fork,
        mkdir,
        getpid,
        kill,
    )


@dataclass
class Config:
    files:       list[str]
    directories: list[str]
    commands:    Union[list[list[str]], list[str]]
    delay_sec:   float


def load_config(config_path: str) -> Config:
    # Load config into Config dataclass
    with open(config_path, 'r') as conf_file:
        config_data: dict = safe_load(conf_file)
        config: Config = Config([], [], [], 600)

        if not config_data:
            stderr.write("Can't read emtpy config file\n")
            exit(1)

        if "files" in config_data:
            config.files = config_data["files"]
        if "directories" in config_data:
            config.directories = config_data["directories"]

        if "commands" in config_data:
            config.commands = config_data["commands"]
        else:
            stderr.write("Please specify command(s) in which to run\n")
            exit(1)

        if "delay" in config_data:
            if type(config_data["delay"] == str):
                suffix: str = config_data["delay"][-1].lower()
                delay: int = config_data["delay"][:-1]

                match suffix:
                    case 's':
                        config.delay_sec = float(delay)
                    case 'm':
                        config.delay_sec = float(delay) * 60
                    case 'h':
                        config.delay_sec = float(delay) * 3600
                    case _:
                        stderr.write(f"Unkown suffix '{suffix}'. Use 's', 'm', 'h' or a number in seconds.\n")
                        exit(1)
            else:
                config.delay_sec = config_data["delay"]
    
    return config


def write_pipe(msg: str) -> None:
    with open("/tmp/rwall/rwall.fifo", 'w') as named_pipe:
        named_pipe.write(msg)


def read_pipe(fifo_msg: list[str]) -> None:
    with open("/tmp/rwall/rwall.fifo", 'r') as named_pipe:
        fifo_msg.append(named_pipe.read())


def pipe_listener(config: Config) -> None:
    fifo_msg: str = ""

    # Write the current PID to a file for communication
    # Currently not used for anything
    with open("/tmp/rwall/rwall.pid", 'w') as pid_file:
        pid_file.write(str(getpid()))

    # Start listening to the pipe
    while fifo_msg != "kill":
        with open("/tmp/rwall/rwall.fifo", 'r') as named_pipe:
            fifo_msg = named_pipe.read()

        if fifo_msg == "next" or fifo_msg == "dnext":
            next_wallpaper(config)

            if fifo_msg == "next":
                # Create a file with the current time to tell the daemon
                # when the wallpaper was last changed
                with open("/tmp/rwall/rwall.timestamp", 'w') as timestamp_file:
                    timestamp_file.write(str(time()))

        if fifo_msg == "rmtimestamp":
            remove("/tmp/rwall/rwall.timestamp")

        if fifo_msg == "hi":
            with open("/tmp/rwall/rwall.fifo", "w") as named_pipe:
                named_pipe.write("hello")

    # Cleanup PID file
    remove("/tmp/rwall/rwall.pid")


def daemon_loop(config: Config) -> None:
    fifo_msg: str = ""
    delay_sec: float = 0

    while True:
        if path.isfile("/tmp/rwall/rwall.timestamp"):
            with open("/tmp/rwall/rwall.timestamp", 'r') as timestamp_file:
                last_changed: float = float(timestamp_file.read())

            fifo_msg = "rmtimestamp"
            delay_sec = config.delay_sec - (time() - last_changed)
        else:
            fifo_msg = "dnext"
            delay_sec = config.delay_sec

        with open("/tmp/rwall/rwall.fifo", 'w') as named_pipe:
            named_pipe.write(fifo_msg)

        sleep(delay_sec)


def start_daemon(config: Config, daemonize: bool) -> None:
    if not path.isdir("/tmp/rwall"):
        mkdir("/tmp/rwall")
    if not path.exists("/tmp/rwall/rwall.fifo"):
        mkfifo("/tmp/rwall/rwall.fifo")

    if path.isfile("/tmp/rwall/rwall.timestamp"):
        remove("/tmp/rwall/rwall.timestamp")

    listener: Thread = Thread(target=pipe_listener, args=(config,))
    daemon:   Thread = Thread(target=daemon_loop, args=(config,), daemon=True)

    proc_pid: int = fork() if daemonize else -1

    if not daemonize or proc_pid == 0:
        listener.start()
        daemon.start()


def next_wallpaper(config: Config) -> None:
    # Create a list that will hold all potential wallpaper paths
    all_wallpapers: list[str] = config.files

    # Add all files in each directory specified in config
    for directory in config.directories:
        for filename in listdir(directory):
            all_wallpapers.append(f"{directory}/{filename}")

    if len(all_wallpapers) == 0:
        stderr.write("Please specify files and/or directories in rwall.yml\n")
        exit(1)

    for command in config.commands:
        wallpaper = rchoice(all_wallpapers)

        if type(command) == list:
            for subcommand in command:
                sprun(shsplit(subcommand.replace("{wall}", wallpaper)))
        elif type(command) == str:
            sprun(shsplit(command.replace("{wall}", wallpaper)))
        else:
            stderr.write(f"Command '{command}' is not valid. Please use a string or list.\n")
            exit(1)


def check_running() -> bool:
    if path.exists("/tmp/rwall/rwall.fifo"):
        timed_write: Thread = Thread(target=write_pipe, args=("hi",), daemon=True)
        timed_write.start()

        fifo_msg: list = []
        timed_read: Thread = Thread(target=read_pipe, args=(fifo_msg,), daemon=True)

        timed_read.start()
        sleep(0.1)

        if not timed_read.is_alive() and fifo_msg[0] == "hello":
            return True

    return False


def main(arguments: Namespace) -> None:
    # Try to find where the config file might be located
    # Check XDG_CONFIG_HOME or ~/.config
    if "XDG_CONFIG_HOME" in environ:
        config_path: str = environ["XDG_CONFIG_HOME"]
    elif path.isdir(path.expanduser("~/.config")):
        config_path: str = path.expanduser("~/.config")
    else:
        stderr.write("Can't find config parent directory.\n")
        exit(1)

    # Now try to find the config file itself
    if path.isfile(f"{config_path}/rwall.yml"):
        config_path += "/rwall.yml"
    elif path.isfile(f"{config_path}/rwall.yaml"):
        config_path += "/rwall.yaml"
    else:
        stderr.write("Can't find config file 'rwall.yaml' or 'rwall.yml'\n")
        exit(1)

    config: Config = load_config(config_path)

    match arguments.subcommand:
        case "start":
            if check_running():
                stderr.write("Daemon is already running.\n") 
                exit(1)

            start_daemon(config, arguments.daemon)
        case "next":
            try:
                with open("/tmp/rwall/rwall.pid", 'r') as pid_file:
                    possible_pid: int = int(pid_file.read())
                kill(possible_pid, 0)
            except OSError or FileNotFoundError:
                next_wallpaper(config)
            else:
                with open("/tmp/rwall/rwall.fifo", 'w') as named_pipe:
                    named_pipe.write("next")
        case "kill":
            with open("/tmp/rwall/rwall.fifo", 'w') as named_pipe:
                named_pipe.write("kill")


if __name__ == "__main__":
    parser = ArgumentParser(prog = "rwall")
    subparsers = parser.add_subparsers(dest = "subcommand")

    start_parser = subparsers.add_parser("start")
    start_parser.add_argument("-d", "--daemon", action = "store_true", dest = "daemon")

    next_parser = subparsers.add_parser("next")

    kill_parser = subparsers.add_parser("kill")

    arguments = parser.parse_args()

    main(arguments)
